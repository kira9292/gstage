package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EtatPaiementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtatPaiementAllPropertiesEquals(EtatPaiement expected, EtatPaiement actual) {
        assertEtatPaiementAutoGeneratedPropertiesEquals(expected, actual);
        assertEtatPaiementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtatPaiementAllUpdatablePropertiesEquals(EtatPaiement expected, EtatPaiement actual) {
        assertEtatPaiementUpdatableFieldsEquals(expected, actual);
        assertEtatPaiementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtatPaiementAutoGeneratedPropertiesEquals(EtatPaiement expected, EtatPaiement actual) {
        assertThat(expected)
            .as("Verify EtatPaiement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtatPaiementUpdatableFieldsEquals(EtatPaiement expected, EtatPaiement actual) {
        assertThat(expected)
            .as("Verify EtatPaiement relevant properties")
            .satisfies(e -> assertThat(e.getPaymentNumber()).as("check paymentNumber").isEqualTo(actual.getPaymentNumber()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getActCode()).as("check actCode").isEqualTo(actual.getActCode()))
            .satisfies(e -> assertThat(e.getPaymentPhone()).as("check paymentPhone").isEqualTo(actual.getPaymentPhone()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getProcessingDate()).as("check processingDate").isEqualTo(actual.getProcessingDate()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEtatPaiementUpdatableRelationshipsEquals(EtatPaiement expected, EtatPaiement actual) {
        assertThat(expected)
            .as("Verify EtatPaiement relationships")
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()));
    }
}
