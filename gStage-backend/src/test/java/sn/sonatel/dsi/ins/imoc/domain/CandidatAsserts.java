package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CandidatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAllPropertiesEquals(Candidat expected, Candidat actual) {
        assertCandidatAutoGeneratedPropertiesEquals(expected, actual);
        assertCandidatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAllUpdatablePropertiesEquals(Candidat expected, Candidat actual) {
        assertCandidatUpdatableFieldsEquals(expected, actual);
        assertCandidatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAutoGeneratedPropertiesEquals(Candidat expected, Candidat actual) {
        assertThat(expected)
            .as("Verify Candidat auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatUpdatableFieldsEquals(Candidat expected, Candidat actual) {
        assertThat(expected)
            .as("Verify Candidat relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getBirthPlace()).as("check birthPlace").isEqualTo(actual.getBirthPlace()))
            .satisfies(e -> assertThat(e.getCni()).as("check cni").isEqualTo(actual.getCni()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEducationLevel()).as("check educationLevel").isEqualTo(actual.getEducationLevel()))
            .satisfies(e -> assertThat(e.getSchool()).as("check school").isEqualTo(actual.getSchool()))
            .satisfies(e -> assertThat(e.getFormation()).as("check formation").isEqualTo(actual.getFormation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatUpdatableRelationshipsEquals(Candidat expected, Candidat actual) {
        assertThat(expected)
            .as("Verify Candidat relationships")
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()));
    }
}
