package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContratAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAllPropertiesEquals(Contrat expected, Contrat actual) {
        assertContratAutoGeneratedPropertiesEquals(expected, actual);
        assertContratAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAllUpdatablePropertiesEquals(Contrat expected, Contrat actual) {
        assertContratUpdatableFieldsEquals(expected, actual);
        assertContratUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAutoGeneratedPropertiesEquals(Contrat expected, Contrat actual) {
        assertThat(expected)
            .as("Verify Contrat auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratUpdatableFieldsEquals(Contrat expected, Contrat actual) {
        assertThat(expected)
            .as("Verify Contrat relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getCompensation()).as("check compensation").isEqualTo(actual.getCompensation()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAssignmentSite()).as("check assignmentSite").isEqualTo(actual.getAssignmentSite()))
            .satisfies(e -> assertThat(e.getSignatureDate()).as("check signatureDate").isEqualTo(actual.getSignatureDate()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratUpdatableRelationshipsEquals(Contrat expected, Contrat actual) {
        assertThat(expected)
            .as("Verify Contrat relationships")
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()));
    }
}
