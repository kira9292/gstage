package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StagiairesProposerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStagiairesProposerAllPropertiesEquals(StagiairesProposer expected, StagiairesProposer actual) {
        assertStagiairesProposerAutoGeneratedPropertiesEquals(expected, actual);
        assertStagiairesProposerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStagiairesProposerAllUpdatablePropertiesEquals(StagiairesProposer expected, StagiairesProposer actual) {
        assertStagiairesProposerUpdatableFieldsEquals(expected, actual);
        assertStagiairesProposerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStagiairesProposerAutoGeneratedPropertiesEquals(StagiairesProposer expected, StagiairesProposer actual) {
        assertThat(expected)
            .as("Verify StagiairesProposer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStagiairesProposerUpdatableFieldsEquals(StagiairesProposer expected, StagiairesProposer actual) {
        assertThat(expected)
            .as("Verify StagiairesProposer relevant properties")
            .satisfies(e -> assertThat(e.getDemandeur()).as("check demandeur").isEqualTo(actual.getDemandeur()))
            .satisfies(e -> assertThat(e.getDirection()).as("check direction").isEqualTo(actual.getDirection()))
            .satisfies(e -> assertThat(e.getNbreStagiaire()).as("check nbreStagiaire").isEqualTo(actual.getNbreStagiaire()))
            .satisfies(e -> assertThat(e.getProfilFormation()).as("check profilFormation").isEqualTo(actual.getProfilFormation()))
            .satisfies(e ->
                assertThat(e.getStagiaieSousRecomandation())
                    .as("check stagiaieSousRecomandation")
                    .isEqualTo(actual.getStagiaieSousRecomandation())
            )
            .satisfies(e -> assertThat(e.getCommentaire()).as("check commentaire").isEqualTo(actual.getCommentaire()))
            .satisfies(e -> assertThat(e.getMotif()).as("check motif").isEqualTo(actual.getMotif()))
            .satisfies(e -> assertThat(e.getTraitement()).as("check traitement").isEqualTo(actual.getTraitement()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStagiairesProposerUpdatableRelationshipsEquals(StagiairesProposer expected, StagiairesProposer actual) {
        // empty method
    }
}
