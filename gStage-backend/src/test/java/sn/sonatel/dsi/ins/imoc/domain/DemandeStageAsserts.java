package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DemandeStageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeStageAllPropertiesEquals(DemandeStage expected, DemandeStage actual) {
        assertDemandeStageAutoGeneratedPropertiesEquals(expected, actual);
        assertDemandeStageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeStageAllUpdatablePropertiesEquals(DemandeStage expected, DemandeStage actual) {
        assertDemandeStageUpdatableFieldsEquals(expected, actual);
        assertDemandeStageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeStageAutoGeneratedPropertiesEquals(DemandeStage expected, DemandeStage actual) {
        assertThat(expected)
            .as("Verify DemandeStage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeStageUpdatableFieldsEquals(DemandeStage expected, DemandeStage actual) {
        assertThat(expected)
            .as("Verify DemandeStage relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getCreationDate()).as("check creationDate").isEqualTo(actual.getCreationDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getInternshipType()).as("check internshipType").isEqualTo(actual.getInternshipType()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getResume()).as("check resume").isEqualTo(actual.getResume()))
            .satisfies(e -> assertThat(e.getResumeContentType()).as("check resume contenty type").isEqualTo(actual.getResumeContentType()))
            .satisfies(e -> assertThat(e.getCoverLetter()).as("check coverLetter").isEqualTo(actual.getCoverLetter()))
            .satisfies(e ->
                assertThat(e.getCoverLetterContentType())
                    .as("check coverLetter contenty type")
                    .isEqualTo(actual.getCoverLetterContentType())
            )
            .satisfies(e -> assertThat(e.getValidated()).as("check validated").isEqualTo(actual.getValidated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDemandeStageUpdatableRelationshipsEquals(DemandeStage expected, DemandeStage actual) {
        assertThat(expected)
            .as("Verify DemandeStage relationships")
            .satisfies(e -> assertThat(e.getCandidat()).as("check candidat").isEqualTo(actual.getCandidat()))
            .satisfies(e -> assertThat(e.getAssistantGWTE()).as("check assistantGWTE").isEqualTo(actual.getAssistantGWTE()))
            .satisfies(e -> assertThat(e.getManager()).as("check manager").isEqualTo(actual.getManager()))
            .satisfies(e -> assertThat(e.getDepartement()).as("check departement").isEqualTo(actual.getDepartement()))
            .satisfies(e -> assertThat(e.getBusinessUnit()).as("check businessUnit").isEqualTo(actual.getBusinessUnit()));
    }
}
