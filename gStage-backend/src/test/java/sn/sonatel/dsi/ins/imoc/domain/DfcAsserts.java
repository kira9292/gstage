package sn.sonatel.dsi.ins.imoc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DfcAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDfcAllPropertiesEquals(Dfc expected, Dfc actual) {
        assertDfcAutoGeneratedPropertiesEquals(expected, actual);
        assertDfcAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDfcAllUpdatablePropertiesEquals(Dfc expected, Dfc actual) {
        assertDfcUpdatableFieldsEquals(expected, actual);
        assertDfcUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDfcAutoGeneratedPropertiesEquals(Dfc expected, Dfc actual) {
        assertThat(expected)
            .as("Verify Dfc auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDfcUpdatableFieldsEquals(Dfc expected, Dfc actual) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDfcUpdatableRelationshipsEquals(Dfc expected, Dfc actual) {
        // empty method
    }
}
